#include "variant.h"
#include "types.h"
#include "USARTClass.h"
#include "adc.h"
// >>> Autogenerated by variant_codegen.py >>>

const uint8_t PF0 = 0;
const uint8_t PF1 = 1;
const uint8_t PA0 = 2;
const uint8_t PA1 = 3;
const uint8_t PA2 = 4;
const uint8_t PA3 = 5;
const uint8_t PA4 = 6;
const uint8_t PA5 = 7;
const uint8_t PA6 = 8;
const uint8_t PA7 = 9;
const uint8_t PB0 = 10;
const uint8_t PB1 = 11;
const uint8_t PA8 = 12;
const uint8_t PA9 = 13;
const uint8_t PA10 = 14;
const uint8_t PA11 = 15;
const uint8_t PA12 = 16;
const uint8_t PA13 = 17;
const uint8_t PA14 = 18;
const uint8_t PA15 = 19;
const uint8_t PB3 = 20;
const uint8_t PB4 = 21;
const uint8_t PB5 = 22;
const uint8_t PB6 = 23;
const uint8_t PB7 = 24;

PinInfo PIN_MAP[] = {
  {GPIOF, 0, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOF, 1, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOA, 0, 1, NOT_SET, TIMER2, 1, NOT_SET, NOT_SET},
  {GPIOA, 1, 2, NOT_SET, TIMER2, 2, NOT_SET, NOT_SET},
  {GPIOA, 2, 3, NOT_SET, TIMER2, 3, NOT_SET, NOT_SET},
  {GPIOA, 3, 4, NOT_SET, TIMER2, 4, NOT_SET, NOT_SET},
  {GPIOA, 4, 1, NOT_SET, TIMER3, 2, NOT_SET, NOT_SET},
  {GPIOA, 5, 2, NOT_SET, TIMER2, 1, NOT_SET, NOT_SET},
  {GPIOA, 6, 3, NOT_SET, TIMER16, 1, NOT_SET, NOT_SET},
  {GPIOA, 7, 4, NOT_SET, TIMER17, 1, NOT_SET, NOT_SET},
  {GPIOB, 0, 11, NOT_SET, TIMER3, 3, NOT_SET, NOT_SET},
  {GPIOB, 1, 12, NOT_SET, TIMER3, 4, NOT_SET, NOT_SET},
  {GPIOA, 8, NOT_SET, NOT_SET, TIMER1, 1, NOT_SET, NOT_SET},
  {GPIOA, 9, NOT_SET, NOT_SET, TIMER1, 2, NOT_SET, NOT_SET},
  {GPIOA, 10, NOT_SET, NOT_SET, TIMER1, 3, NOT_SET, NOT_SET},
  {GPIOA, 11, NOT_SET, NOT_SET, TIMER1, 4, NOT_SET, NOT_SET},
  {GPIOA, 12, NOT_SET, NOT_SET, TIMER16, 1, NOT_SET, NOT_SET},
  {GPIOA, 13, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOA, 14, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOA, 15, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOB, 3, NOT_SET, NOT_SET, TIMER2, 2, NOT_SET, NOT_SET},
  {GPIOB, 4, NOT_SET, NOT_SET, TIMER3, 1, NOT_SET, NOT_SET},
  {GPIOB, 5, NOT_SET, NOT_SET, TIMER3, 2, NOT_SET, NOT_SET},
  {GPIOB, 6, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOB, 7, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
};

const uint8_t TIMER1 = 0;
const uint8_t TIMER2 = 1;
const uint8_t TIMER3 = 2;
const uint8_t TIMER15 = 3;
const uint8_t TIMER16 = 4;
const uint8_t TIMER17 = 5;
const uint8_t TIMER6 = 6;
const uint8_t TIMER7 = 7;

TimerChannelData timer1ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer2ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer3ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer15ch[2] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer16ch[1] = {
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer17ch[1] = {
  {0, false, 0, 0, 0, 0}
};

TimerInfo TIMER_MAP[] = {
  {TIM1, TIM1_UP_TIM16_IRQn, 1000, 0, timer1ch},
  {TIM2, TIM2_IRQn, 1000, 0, timer2ch},
  {TIM3, TIM3_IRQn, 1000, 0, timer3ch},
  {TIM15, TIM15_IRQn, 1000, 0, timer15ch},
  {TIM16, TIM16_IRQn, 1000, 0, timer16ch},
  {TIM17, TIM17_IRQn, 1000, 0, timer17ch},
  {TIM6, TIM6_DAC1_IRQn, 1000, 0, (TimerChannelData *)0},
  {TIM7, TIM7_DAC2_IRQn, 1000, 0, (TimerChannelData *)0},
  // ^^^ Look up IRQn names from CMSIS device header ^^^
};

// <<< Autogenerated by variant_codegen.py <<<

// Use the 2 basic timers and 3 others
TimebaseChannel TIMEBASE_MAP[] = {
  {.timer = NOT_SET, .isr = 0}, // 0
  {.timer = NOT_SET, .isr = 0}, // 1
  {.timer = NOT_SET, .isr = 0}, // 2
  {.timer = NOT_SET, .isr = 0}, // 3
  {.timer = NOT_SET, .isr = 0} // 4
};

// Serial
USARTInfo USART_MAP[2] = {
  { USART1, USART1_IRQn, PA9, PA10 },
  { USART2, USART2_IRQn, PA2, PA15 },
};
USARTClass Serial1(&USART_MAP[0]);
USARTClass Serial2(&USART_MAP[1]);

bool isTimer32Bit(uint8_t tim) {
  return (tim == TIMER2);
}

uint8_t numChannelsInTimer(uint8_t tim) {
  if (tim < TIMER15)
    return 4;
  else if (tim < TIMER16)
    return 2;
  else if (tim < TIMER6)
    return 1;
  else
    return 0;
}

bool isAnalogPin(uint8_t pin) {
  return (PIN_MAP[pin].adcChannel != NOT_SET);
}

void variantInit() {
  TIMEBASE_MAP[0].timer = TIMER6;
  TIMEBASE_MAP[1].timer = TIMER7;
  TIMEBASE_MAP[2].timer = TIMER16;
  TIMEBASE_MAP[3].timer = TIMER17;
  TIMEBASE_MAP[4].timer = TIMER15;

  // GPIO
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  //RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
  // SYSCFG - needed for EXTI
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  // Timer clocks
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
  // RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  // RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
  // RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
  // RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM13, ENABLE);
  // RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM14, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM15, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
  // RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM18, ENABLE);
  // RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM19, ENABLE);

  // USART
  RCC_USARTCLKConfig(RCC_USART1CLK_SYSCLK);
  RCC_USARTCLKConfig(RCC_USART2CLK_SYSCLK);
  RCC_USARTCLKConfig(RCC_USART3CLK_SYSCLK);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);

  // ADC(s)
  // RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  // Is there no equivalent of this?
  // RCC_ADCCLKConfig(RCC_PCLK2_Div6);
  adcInit(ADC1);
}
